import DashboardLayout from '@/DashboardLayout';
import { Container, Toolbar, Button, Avatar } from '@mui/material';
import { DataGrid } from '@mui/x-data-grid';
import Title from './../../../../components/Title/Title';
import Head from 'next/head';
import Image from 'next/image';
import useAxiosSecure from '@/hooks/useAxiosSecure';
import { useQuery } from '@tanstack/react-query';
import Lottie from 'lottie-react';
import loading from "../../../../assets/Loading/loading.json";



 const TeacherRequest = () => {



  const axiosSecure = useAxiosSecure();
  const {
    data: teacherRequest = [],
    refetch,
    isLoading,
  } = useQuery({
    queryKey: ["Teacher-Request"],
    queryFn: async () => {
      const res = await axiosSecure.get("/teacherRequest");
      return res.data;
    },
    onSuccess: () => {
      refetch();
    },
  });


  if (isLoading) {
    return (
      <Container
        sx={{
          height: "100vh",
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
        }}
      >
        <Lottie animationData={loading} />
      </Container>
    );
  }










  // http://localhost:5000/teacherRequest










    const columns = [
    {
      field: "image",
      headerName: "Image",
      width: 60,
      renderCell: (params) => (
        <Image
          src={params.row.image || ""}
          width={96}
          height={96}
          alt={`Image for ${params.row.fullName}`}
          style={{
            width: "100%",
            height: "auto",
            objectFit: "cover",
            borderRadius: "70%",
          }}
        />
      ),
    },
      { field: 'name', headerName: 'Name', width: 130 },
      { field: 'experience', headerName: 'Experience', width: 130 },
      { field: 'title', headerName: 'Title', width: 130 },
      { field: 'category', headerName: 'Category', width: 130 },
      { field: 'status', headerName: 'Status', width: 130 },
      {
        field: 'actions',
        headerName: 'Actions',
        width: 180,
        renderCell: (params) => (
          <div style={{ display: 'flex', gap: '4px' }}>
            <Button variant="contained" color="primary" size="small" onClick={() => handleApprove(params.row.id)}>
              Approve
            </Button>
            <Button variant="contained" color="secondary" size="small" onClick={() => handleReject(params.row.id)}>
              Reject
            </Button>
          </div>
        ),
      },
    ];

  
    const handleApprove = (id) => {
      console.log(`Teacher with ID ${id} approved`);
    };
  
    const handleReject = (id) => {
      console.log(`Teacher with ID ${id} rejected`);
    };
  
  return (
    <DashboardLayout>
      <Head>
        <title>EduPulse || Teacher Request</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Toolbar />
      <Title title={'Teacher Request'} />
      <Container maxWidth="lg" align="center" style={{ marginTop: '2rem' }}>
      <DataGrid
  rows={teacherRequest}
  columns={columns}
  getRowId={(row)=> row._id}
  initialState={{
    pagination: {
      paginationModel: { page: 0, pageSize: 5 },
    },
  }}
  pageSizeOptions={[5, 10]}
/>
      </Container>
    </DashboardLayout>
  );
}

export default TeacherRequest